import os
import json
import ipdb
# This script is to read the json files generated by endpoint.py and count statistics.
# And to convert the rdf forms into textual form and save in a file textualized.json under the same directory.
from tqdm import tqdm
from random import sample
# this function is used to calculate how many triples in specific file
def get_stat():
    for filename in os.listdir(os.getcwd()):
        if filename.endswith('.json') and filename in ['4e_v2_noAsso.json']:
            with open(os.path.join(os.getcwd(), filename), 'r') as f: 
                triples = json.load(f)
                print(triples[0], filename)
                con = dict()
                num = 0
                for i in triples:
                    for value in i.values():
                        if value["value"] in con:
                            con[value["value"]] += 1
                        if value["value"] not in con:
                            con[value["value"]] = 0
                ipdb.set_trace()
                print(f'This file {filename} has {num} which contains type in their triple, with totaly {len(triples)} graphs matched.')
    return


# main function to: 1. get the triple files in the same directory; 
# 2. convert the triples to text form
# 3. save in a json file
def convert(entDict:dict):
    '''
    entDict: dictionary from getEntDIct function
    return the number of triple processed and a line of info
    '''
    out = []
    for filename in os.listdir(os.getcwd()):
        if filename.endswith('.json'):
            with open(os.path.join(os.getcwd(), filename), 'r') as f:   
                triples = json.load(f)
                for triple in tqdm(triples):
                    # extract the triplea based on the subgraph-pattern
                    if filename.startswith("0"):
                        text_triple = { "type":filename.split("json")[0],
                                        "value": [(Eid2label(triple["subj"], entDict), triple["prop"]["value"].split('/vocab/')[-1], Eid2label(triple["obj"], entDict))],
                                        "answer": sample([],1)
                                        }

                    if filename.startswith("1_v2.json"):
                        text_triple = { "type":filename.split("json")[0],
                                            "value": [(Eid2label(triple["subj"], entDict), triple["prop1"]["value"].split('/vocab/')[-1], Eid2label(triple["obj1"], entDict)), 
                                                    (Eid2label(triple["subj"], entDict), triple["prop2"]["value"].split('/vocab/')[-1], Eid2label(triple["obj2"], entDict))],
                                        "answer":sample([Eid2label(triple["subj"], entDict), 
                                                        triple["prop1"]["value"].split('/vocab/')[-1], 
                                                        triple["prop2"]["value"].split('/vocab/')[-1]],1)
                                                        }
                    if filename.startswith("2"):
                        text_triple = { "type":filename.split("json")[0],
                                        "value": [(Eid2label(triple["subj"], entDict), triple["prop1"]["value"].split('/vocab/')[-1], Eid2label(triple["obj1"], entDict)), 
                                                  (Eid2label(triple["obj1"], entDict), triple["prop2"]["value"].split('/vocab/')[-1], Eid2label(triple["obj2"], entDict))],
                                        "answer":sample([Eid2label(triple["obj1"], entDict), 
                                                        triple["prop1"]["value"].split('/vocab/')[-1], 
                                                        triple["prop2"]["value"].split('/vocab/')[-1]],1)
                                                    }
                
                    if filename.startswith("3"):
                        text_triple = { "type":filename.split("json")[0],
                                        "value": [(Eid2label(triple["subj"], entDict), triple["prop1"]["value"].split('/vocab/')[-1], Eid2label(triple["obj1"], entDict)), 
                                                  (Eid2label(triple["subj"], entDict), triple["prop2"]["value"].split('/vocab/')[-1], Eid2label(triple["obj2"], entDict)),
                                                  (Eid2label(triple["obj1"], entDict), triple["prop3"]["value"].split('/vocab/')[-1], Eid2label(triple["subj"], entDict))],
                                        "answer":sample([Eid2label(triple["subj"], entDict), 
                                                        triple["prop1"]["value"].split('/vocab/')[-1], 
                                                        triple["prop2"]["value"].split('/vocab/')[-1]],1)                                                
                                                    }

                    if filename.startswith("4"):
                        text_triple = { "type":filename.split("json")[0],
                                        "value": [(Eid2label(triple["subj1"], entDict), triple["prop1"]["value"].split('/vocab/')[-1], Eid2label(triple["obj"], entDict)), 
                                                  (Eid2label(triple["subj2"], entDict), triple["prop2"]["value"].split('/vocab/')[-1], Eid2label(triple["obj"], entDict))],
                                        "answer": Eid2label(triple["subj1"], entDict)                                            
                                                    }
                
                    if filename.startswith("5"):
                        continue
                        text_triple = { "type":filename.split("json")[0],
                                        "value": [(Eid2label(triple["subj1"], entDict), triple["prop1"]["value"].split('/vocab/')[-1], Eid2label(triple["obj"], entDict)), 
                                                  (Eid2label(triple["subj2"], entDict), triple["prop2"]["value"].split('/vocab/')[-1], Eid2label(triple["obj"], entDict)), 
                                                  (Eid2label(triple["subj1"], entDict), triple["prop3"]["value"].split('/vocab/')[-1], Eid2label(triple["subj2"], entDict))],
                                        "answer": sample([Eid2label(triple["subj1"], entDict), 
                                                          Eid2label(triple["subj2"], entDict),
                                                          Eid2label(triple["obj"], entDict),
                                                          triple["prop1"]["value"].split('/vocab/')[-1], 
                                                          triple["prop2"]["value"].split('/vocab/')[-1],
                                                          triple["prop3"]["value"].split('/vocab/')[-1]
                                                          ], 1)
                                                    }

                    if filename.startswith("6"):
                        continue
                        text_triple = { "type":filename.split("json")[0],
                                        "value": [(Eid2label(triple["subj1"], entDict), triple["prop1"]["value"].split('/vocab/')[-1], Eid2label(triple["obj"], entDict)), 
                                                  (Eid2label(triple["subj2"], entDict), triple["prop2"]["value"].split('/vocab/')[-1], Eid2label(triple["obj"], entDict)), 
                                                  (Eid2label(triple["subj1"], entDict), triple["prop3"]["value"].split('/vocab/')[-1], Eid2label(triple["subj2"], entDict)), 
                                                  (Eid2label(triple["subj2"], entDict), triple["prop4"]["value"].split('/vocab/')[-1], Eid2label(triple["subj1"], entDict))]
                                                    }
                    if filename.startswith("7"):
                        text_triple = { "type":filename.split("json")[0],
                                        "value": [(Eid2label(triple["subj"], entDict), triple["prop1"]["value"].split('/vocab/')[-1], Eid2label(triple["obj1"], entDict)), 
                                                  (Eid2label(triple["obj1"], entDict), triple["prop2"]["value"].split('/vocab/')[-1], Eid2label(triple["obj2"], entDict)), 
                                                  (Eid2label(triple["obj1"], entDict), triple["prop3"]["value"].split('/vocab/')[-1], Eid2label(triple["subj"], entDict))]
                                                    }
    
                    if filename.startswith("8"):
                        text_triple = { "type":filename.split("json")[0],
                                        "value": [(Eid2label(triple["subj"], entDict), triple["prop1"]["value"].split('/vocab/')[-1], Eid2label(triple["obj1"], entDict)), 
                                                  (Eid2label(triple["obj1"], entDict), triple["prop2"]["value"].split('/vocab/')[-1], Eid2label(triple["obj2"], entDict)), 
                                                  (Eid2label(triple["obj1"], entDict), triple["prop3"]["value"].split('/vocab/')[-1], Eid2label(triple["subj"], entDict)), 
                                                  (Eid2label(triple["obj2"], entDict), triple["prop4"]["value"].split('/vocab/')[-1], Eid2label(triple["obj1"], entDict))]
                                                    }
                    if filename.startswith("9"):
                        continue
                        text_triple = { "type":filename.split("json")[0],
                                        "value": [(Eid2label(triple["subj"], entDict), triple["prop1"]["value"].split('/vocab/')[-1], Eid2label(triple["obj1"], entDict)), 
                                                  (Eid2label(triple["obj1"], entDict), triple["prop2"]["value"].split('/vocab/')[-1], Eid2label(triple["obj2"], entDict)), 
                                                  (Eid2label(triple["obj2"], entDict), triple["prop3"]["value"].split('/vocab/')[-1], Eid2label(triple["subj"], entDict))]
                                                    }
                    if filename.startswith("10"):
                        continue
                        text_triple = { "type":filename.split("json")[0],
                                        "value": [(Eid2label(triple["subj1"], entDict), triple["prop1"]["value"].split('/vocab/')[-1], Eid2label(triple["obj"], entDict)), 
                                                  (Eid2label(triple["subj2"], entDict), triple["prop2"]["value"].split('/vocab/')[-1], Eid2label(triple["obj"], entDict)), 
                                                  (Eid2label(triple["subj1"], entDict), triple["prop3"]["value"].split('/vocab/')[-1], Eid2label(triple["subj2"], entDict)), 
                                                  (Eid2label(triple["obj"], entDict), triple["prop4"]["value"].split('/vocab/')[-1], Eid2label(triple["subj1"], entDict))]
                                                    }
                    if filename.startswith("11"):
                        continue
                        text_triple = { "type":filename.split("json")[0],
                                        "value": [(Eid2label(triple["subj1"], entDict), triple["prop1"]["value"].split('/vocab/')[-1], Eid2label(triple["obj"], entDict)), 
                                                  (Eid2label(triple["subj2"], entDict), triple["prop2"]["value"].split('/vocab/')[-1], Eid2label(triple["obj"], entDict)), 
                                                  (Eid2label(triple["subj1"], entDict), triple["prop3"]["value"].split('/vocab/')[-1], Eid2label(triple["subj2"], entDict)), 
                                                  (Eid2label(triple["obj"], entDict), triple["prop4"]["value"].split('/vocab/')[-1], Eid2label(triple["subj2"], entDict))]
                                                    }
                    if filename.startswith("12"):
                        continue
                        text_triple = { "type":filename.split("json")[0],
                                        "value": [(Eid2label(triple["subj1"], entDict), triple["prop1"]["value"].split('/vocab/')[-1], Eid2label(triple["obj"], entDict)), 
                                                  (Eid2label(triple["subj2"], entDict), triple["prop2"]["value"].split('/vocab/')[-1], Eid2label(triple["obj"], entDict)), 
                                                  (Eid2label(triple["subj1"], entDict), triple["prop3"]["value"].split('/vocab/')[-1], Eid2label(triple["subj2"], entDict)), 
                                                  (Eid2label(triple["obj"], entDict), triple["prop4"]["value"].split('/vocab/')[-1], Eid2label(triple["subj2"], entDict)), 
                                                  (Eid2label(triple["obj"], entDict), triple["prop5"]["value"].split('/vocab/')[-1], Eid2label(triple["subj1"], entDict))]
                                                    }
                    if filename.startswith("13"):
                        continue
                        text_triple = { "type":filename.split("json")[0],
                                        "value": [(Eid2label(triple["subj1"], entDict), triple["prop1"]["value"].split('/vocab/')[-1], Eid2label(triple["obj"], entDict)), 
                                                  (Eid2label(triple["subj2"], entDict), triple["prop2"]["value"].split('/vocab/')[-1], Eid2label(triple["obj"], entDict)), 
                                                  (Eid2label(triple["subj1"], entDict), triple["prop3"]["value"].split('/vocab/')[-1], Eid2label(triple["subj2"], entDict)), 
                                                  (Eid2label(triple["obj"], entDict), triple["prop4"]["value"].split('/vocab/')[-1], Eid2label(triple["subj2"], entDict)), 
                                                  (Eid2label(triple["obj"], entDict), triple["prop5"]["value"].split('/vocab/')[-1], Eid2label(triple["subj1"], entDict)), 
                                                  (Eid2label(triple["subj2"], entDict), triple["prop6"]["value"].split('/vocab/')[-1], Eid2label(triple["subj1"], entDict))]
                                                    }
                    if filename.startswith("4"):
                        pass
                    if filename.startswith("13"):
                        pass
                    


                    # filter out the triples with null values, resulted from long id which are falsely created
                    for text_graph in text_triple["value"]:
                        if None in text_graph:
                            text_triple = None
                            break
                    if text_triple:
                        out.append(text_triple)



    with open("total/withNoDuplicate.json", 'w') as f:
        json.dump(out, f, indent=4)

    f.close()
    print(f"{len(out)} textualized triples have beem created")


# helper function to convert the long EID to text form
def Eid2label(triple:dict, entDict:dict):
    '''
    id: triple saved in the json file from endpoint output
    labe: textual label
    '''
    id = triple["value"].split("node/")[-1]
    if len(id) <= 10:
        return entDict[id]
    return None


# load the entity ID2Label dictionary 
def getEntDIct(filename:str) -> dict:
    '''
    filename: the address of the dictionary generated by reading kg.csv file
    '''
    with open(filename) as f:
        entDict = json.load(f)[0]
    f.close()
    return entDict

# check the duplicate relation percentage in different files
def compare():
    num_1 = {}
    num_2 = {}

    for filename in os.listdir(os.getcwd()):
        if filename =="12_v2.json":
            with open(os.path.join(os.getcwd(), filename), 'r') as f: 
                triples = json.load(f)
                for triple in triples:
                    if triple["prop1"] == triple["prop5"]:
                        if triple["prop1"]["value"] in num_1:
                            num_1[triple["prop1"]["value"]] += 1
                        else:
                           num_1[triple["prop1"]["value"]] = 0
                    if triple["prop2"] == triple["prop4"]:
                        if triple["prop2"]["value"] in num_2:
                            num_2[triple["prop2"]["value"]] += 1
                        else:
                           num_2[triple["prop2"]["value"]] = 0
    print(num_1, num_2)
    return                
if __name__ == "__main__":
    # convert ids to labels
    entDict = getEntDIct("/storage/yan/primekg/kg/ent_dict.json")
    convert(entDict)
#    get_stat()
#    compare()